// Code generated by protoc-gen-go.
// source: call.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	call.proto

It has these top-level messages:
	NodeInfo
	Req
	Resp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeInfo struct {
	NodeId  string `protobuf:"bytes,1,opt,name=NodeId" json:"NodeId,omitempty"`
	LeaseId int64  `protobuf:"varint,2,opt,name=LeaseId" json:"LeaseId,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeInfo) GetLeaseId() int64 {
	if m != nil {
		return m.LeaseId
	}
	return 0
}

type Req struct {
	Node      *NodeInfo `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Namespace string    `protobuf:"bytes,2,opt,name=Namespace" json:"Namespace,omitempty"`
	Key       string    `protobuf:"bytes,3,opt,name=Key" json:"Key,omitempty"`
	ReqBuf    []byte    `protobuf:"bytes,4,opt,name=ReqBuf,proto3" json:"ReqBuf,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Req) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Req) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Req) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Req) GetReqBuf() []byte {
	if m != nil {
		return m.ReqBuf
	}
	return nil
}

type Resp struct {
	Node    *NodeInfo `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	Status  int32     `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	Msg     string    `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	RespBuf []byte    `protobuf:"bytes,4,opt,name=RespBuf,proto3" json:"RespBuf,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Resp) GetNode() *NodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Resp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Resp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Resp) GetRespBuf() []byte {
	if m != nil {
		return m.RespBuf
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "pb.NodeInfo")
	proto.RegisterType((*Req)(nil), "pb.Req")
	proto.RegisterType((*Resp)(nil), "pb.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CallMaster service

type CallMasterClient interface {
	Call(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type callMasterClient struct {
	cc *grpc.ClientConn
}

func NewCallMasterClient(cc *grpc.ClientConn) CallMasterClient {
	return &callMasterClient{cc}
}

func (c *callMasterClient) Call(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := grpc.Invoke(ctx, "/pb.CallMaster/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CallMaster service

type CallMasterServer interface {
	Call(context.Context, *Req) (*Resp, error)
}

func RegisterCallMasterServer(s *grpc.Server, srv CallMasterServer) {
	s.RegisterService(&_CallMaster_serviceDesc, srv)
}

func _CallMaster_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallMasterServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CallMaster/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallMasterServer).Call(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _CallMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CallMaster",
	HandlerType: (*CallMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _CallMaster_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call.proto",
}

func init() { proto.RegisterFile("call.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x52, 0xc3, 0x30,
	0x0c, 0x86, 0x49, 0x13, 0xda, 0x46, 0x74, 0xe0, 0x34, 0x70, 0x39, 0x60, 0xc8, 0x65, 0x0a, 0x4b,
	0x86, 0xb2, 0x32, 0xc1, 0xc4, 0x41, 0x32, 0x88, 0x27, 0x70, 0x1a, 0xb5, 0x8b, 0xa9, 0x9d, 0x2a,
	0x1d, 0x78, 0x7b, 0x4e, 0x26, 0xbe, 0x4e, 0x6c, 0xff, 0x27, 0x9d, 0xff, 0xcf, 0x36, 0xc0, 0xce,
	0x58, 0xdb, 0xf8, 0x93, 0x9b, 0x1c, 0x2e, 0x7c, 0x5f, 0xbd, 0xc0, 0xba, 0x73, 0x03, 0xbf, 0x1f,
	0xf7, 0x0e, 0xef, 0x60, 0x19, 0xf2, 0x50, 0x24, 0x65, 0x52, 0xe7, 0x34, 0x13, 0x16, 0xb0, 0xfa,
	0x64, 0x23, 0xba, 0x58, 0x94, 0x49, 0x9d, 0x52, 0xc4, 0xca, 0x41, 0x4a, 0x3c, 0x62, 0x09, 0xd9,
	0xd1, 0x0d, 0x1c, 0x8e, 0xdd, 0x6c, 0x37, 0x8d, 0xef, 0x9b, 0x58, 0x4a, 0x61, 0x83, 0x8f, 0x90,
	0x77, 0xe6, 0x9b, 0xc5, 0x9b, 0x1d, 0x87, 0x92, 0x9c, 0x2e, 0x03, 0xbc, 0x85, 0xf4, 0x83, 0x7f,
	0x8a, 0x34, 0xcc, 0x35, 0xea, 0x55, 0x88, 0xc7, 0xd7, 0xf3, 0xbe, 0xc8, 0xca, 0xa4, 0xde, 0xd0,
	0x4c, 0x95, 0x85, 0x8c, 0x58, 0xbc, 0x1a, 0xbb, 0x7f, 0x8d, 0x9a, 0xb4, 0xe1, 0x6b, 0x32, 0xd3,
	0x59, 0x82, 0xee, 0x9a, 0x66, 0x52, 0x57, 0x2b, 0x87, 0xe8, 0x6a, 0xe5, 0xa0, 0xcf, 0xd3, 0xce,
	0x8b, 0x2c, 0xe2, 0xf6, 0x09, 0xe0, 0xcd, 0x58, 0xdb, 0x1a, 0x99, 0xf8, 0x84, 0x0f, 0x90, 0x29,
	0xe1, 0x4a, 0x6d, 0xc4, 0xe3, 0xfd, 0xfa, 0x2f, 0x88, 0xaf, 0xae, 0xfa, 0x65, 0xf8, 0xd2, 0xe7,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xda, 0x9a, 0xa0, 0x60, 0x01, 0x00, 0x00,
}
