// Code generated by protoc-gen-go.
// source: v1.proto
// DO NOT EDIT!

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	v1.proto

It has these top-level messages:
	Field
	LogRow
	Bulk
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Field_FieldTypes int32

const (
	Field_IsInt    Field_FieldTypes = 0
	Field_IsString Field_FieldTypes = 1
)

var Field_FieldTypes_name = map[int32]string{
	0: "IsInt",
	1: "IsString",
}
var Field_FieldTypes_value = map[string]int32{
	"IsInt":    0,
	"IsString": 1,
}

func (x Field_FieldTypes) String() string {
	return proto.EnumName(Field_FieldTypes_name, int32(x))
}
func (Field_FieldTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Field struct {
	Type Field_FieldTypes `protobuf:"varint,1,opt,name=Type,enum=v1.Field_FieldTypes" json:"Type,omitempty"`
	Key  string           `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Ival int64            `protobuf:"varint,3,opt,name=Ival" json:"Ival,omitempty"`
	Sval string           `protobuf:"bytes,4,opt,name=Sval" json:"Sval,omitempty"`
	Fval float64          `protobuf:"fixed64,5,opt,name=Fval" json:"Fval,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Field) GetType() Field_FieldTypes {
	if m != nil {
		return m.Type
	}
	return Field_IsInt
}

func (m *Field) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Field) GetIval() int64 {
	if m != nil {
		return m.Ival
	}
	return 0
}

func (m *Field) GetSval() string {
	if m != nil {
		return m.Sval
	}
	return ""
}

func (m *Field) GetFval() float64 {
	if m != nil {
		return m.Fval
	}
	return 0
}

type LogRow struct {
	LogType   string   `protobuf:"bytes,1,opt,name=LogType" json:"LogType,omitempty"`
	Timestamp int64    `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Fields    []*Field `protobuf:"bytes,3,rep,name=Fields" json:"Fields,omitempty"`
	Tag       []string `protobuf:"bytes,4,rep,name=Tag" json:"Tag,omitempty"`
	Body      string   `protobuf:"bytes,5,opt,name=Body" json:"Body,omitempty"`
	HostName  string   `protobuf:"bytes,6,opt,name=HostName" json:"HostName,omitempty"`
}

func (m *LogRow) Reset()                    { *m = LogRow{} }
func (m *LogRow) String() string            { return proto.CompactTextString(m) }
func (*LogRow) ProtoMessage()               {}
func (*LogRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogRow) GetLogType() string {
	if m != nil {
		return m.LogType
	}
	return ""
}

func (m *LogRow) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogRow) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *LogRow) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *LogRow) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *LogRow) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

type Bulk struct {
	Rows []*LogRow `protobuf:"bytes,1,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *Bulk) Reset()                    { *m = Bulk{} }
func (m *Bulk) String() string            { return proto.CompactTextString(m) }
func (*Bulk) ProtoMessage()               {}
func (*Bulk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Bulk) GetRows() []*LogRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*Field)(nil), "v1.Field")
	proto.RegisterType((*LogRow)(nil), "v1.LogRow")
	proto.RegisterType((*Bulk)(nil), "v1.Bulk")
	proto.RegisterEnum("v1.Field_FieldTypes", Field_FieldTypes_name, Field_FieldTypes_value)
}

func init() { proto.RegisterFile("v1.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xcd, 0x92, 0xd5, 0xe5, 0x28, 0x32, 0x0e, 0x5e, 0x04, 0x11, 0x89, 0x05, 0x25, 0x57,
	0x83, 0xce, 0x37, 0xd8, 0xc5, 0xb0, 0x30, 0xbc, 0xc8, 0xfa, 0x02, 0x95, 0x95, 0x52, 0xd6, 0x2e,
	0x65, 0xa9, 0x1d, 0x7d, 0x20, 0x7d, 0x4e, 0xc9, 0x99, 0x76, 0x37, 0xe1, 0x3f, 0xdf, 0x39, 0xf0,
	0xff, 0x3f, 0x81, 0x59, 0x9f, 0x2c, 0xda, 0xa3, 0xeb, 0x1c, 0x4e, 0xfa, 0x24, 0xfe, 0x61, 0x30,
	0x5d, 0x57, 0x45, 0xbd, 0x43, 0x03, 0x22, 0x1b, 0xda, 0x42, 0x31, 0xcd, 0xcc, 0xdd, 0xf2, 0x7e,
	0xd1, 0x27, 0x0b, 0x5a, 0x9c, 0xdf, 0xb0, 0xf2, 0x96, 0x2e, 0x70, 0x0e, 0x7c, 0x5f, 0x0c, 0x6a,
	0xa2, 0x99, 0x91, 0x36, 0x48, 0x44, 0x10, 0x69, 0x9f, 0xd7, 0x8a, 0x6b, 0x66, 0xb8, 0x25, 0x1d,
	0xd8, 0x36, 0x30, 0x41, 0x67, 0xa4, 0x03, 0x5b, 0x07, 0x36, 0xd5, 0xcc, 0x30, 0x4b, 0x3a, 0x7e,
	0x01, 0xb8, 0x38, 0xa0, 0x84, 0x69, 0xea, 0xd3, 0x43, 0x37, 0xbf, 0xc2, 0x5b, 0x98, 0xa5, 0x7e,
	0xdb, 0x1d, 0xab, 0x43, 0x39, 0x67, 0xf1, 0x37, 0x83, 0x68, 0xe3, 0x4a, 0xeb, 0x4e, 0xa8, 0xe0,
	0x7a, 0xe3, 0xca, 0x31, 0xac, 0xb4, 0xff, 0x23, 0x3e, 0x82, 0xcc, 0xaa, 0xa6, 0xf0, 0x5d, 0xde,
	0xb4, 0x94, 0x8f, 0xdb, 0x0b, 0xc0, 0x67, 0x88, 0xc8, 0xc9, 0x2b, 0xae, 0xb9, 0xb9, 0x59, 0xca,
	0xb1, 0xa3, 0xfd, 0x5b, 0x84, 0x6a, 0x59, 0x5e, 0x2a, 0xa1, 0x79, 0xa8, 0x96, 0xe5, 0x65, 0x88,
	0xbc, 0x72, 0xbb, 0x81, 0x22, 0x4b, 0x4b, 0x1a, 0x1f, 0x60, 0xf6, 0xee, 0x7c, 0xf7, 0x91, 0x37,
	0x85, 0x8a, 0x88, 0x8f, 0x73, 0xfc, 0x0a, 0x62, 0xf5, 0x55, 0xef, 0xf1, 0x09, 0x84, 0x75, 0x27,
	0xaf, 0x18, 0x59, 0x41, 0xb0, 0x3a, 0xc7, 0xb7, 0xc4, 0x3f, 0x23, 0xfa, 0x83, 0xb7, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfb, 0x1d, 0x94, 0xd8, 0x8f, 0x01, 0x00, 0x00,
}
